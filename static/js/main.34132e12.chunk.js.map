{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34132e12.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component{\n    render(){\n        return(\n            <div>\n                <h1>Meteo/Weather</h1>\n                <p>Com'e' il tempo oggi?/Is it a beautiful day?</p>\n            </div>\n        );\n    }\n};\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component {\n  render() {\n    return (\n      //Clicking the button Get Weather we want that the app run the function getWeather with the react attribute onSubmit that it's going to call this.props.getWeather from the App.js\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n        <button>Get Weather</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nclass Weather extends React.Component {\n  render() {\n    return (\n      //Display on the screen the props after we click the button getWeather. Data passes from the consoleLog to the display\n      <div>\n        {/* && condition operator for react, that shows the text below(Location, Temp, Hum etc) just when we click the button getWeather: when the value of city && country && temp etc are true, so they contain a value */}\n        {this.props.city && this.props.country && (\n          <p>\n            Location: {this.props.city}, {this.props.country}\n          </p>\n        )}\n        {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\n        {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\n        {this.props.description && <p>Conditions: {this.props.description}</p>}\n        {this.props.error && <p>{this.props.error}</p>}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"9353922029a30cfb4937ae8e6de2e6d2\";\n\n//***********************************************Function GetWeather */\nclass App extends React.Component {\n  //state is an object tha lives within a component and is responsible for keeping track  or changing data within a component. That change could be the result of the user interaction maybe using a button or a user submitting a form but generally is just some sort of interaction with the application that causes the data to change. In the old version of react it was like that\n  //constructor(props) {\n  //      super(props);\n  //      this.state = {\n  //      }\n  //}\n  //Now we write just state={}\n  //It's the initial state of the object\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    //e in the argument of the function and e.preventDefault() prevents the default behaviour (full page refresh) when we press the button, so in the consolelog we should see the object back\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    //We've made a constant that takes a function, makes the API call and converts the API calling the json method and assings it to a const called \"data\"\n\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`\n    );\n    //Passing the variable api_call and calling the Json method. Json (JavaScript Object notation) converts the data that it gets from the API to a readable format that any programming language can understand.\n    const data = await api_call.json();\n\n    //To avoid that our app breaks and it return an ERROR temperature: undefined (as setted in the App.js in the \"state\" object) if the users click the button without entering values (writing a city and a country) we need to set this check. If city===true and country===true then show the values\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        //we need to access the array[0]\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values!\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Titles />\n        <Form getWeather={this.getWeather} />\n        <Weather\n          //Defined all these props here it means that we have access of them in the weather.js\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}